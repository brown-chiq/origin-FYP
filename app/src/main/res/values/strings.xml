<resources>
    <string name="app_name">LogiCApp</string>
    <string name="logikit">LogiKit</string>
    <string name="crashcourse">Crash Course</string>
    <string name="challenges">Challenges</string>
    <string name="welcome_to_logicapp">Welcome to LogiCApp</string>
    <string name="course_material">COURSE MATERIAL TO BE ADDED SOON</string>
    <string name="and">AND</string>
    <string name="not">NOT</string>
    <string name="or">OR</string>
    <string name="challenge_intro">Ready to squeeze some brain juice!!!</string>
    <string name="manualIntro">Instructions on how to use the LogiKit</string>
    <string name="intro">Introduction</string>
    <string name="logic_signals">A logic value, 0 or 1, is often called a binary digit, or a bit. If an application requires more than two discrete values, more bits may be used, with a set o n bits representing 2 to the power of n  different values</string>
    <string name="previous_page">Prev</string>
    <string name="next_page">Next</string>
    <string name="combinational_circuit">Combinational Circuit</string>
    <string name="combination_circuit_explanation">A logic circuit whose outputs depend only on its current inputs is called a combinational circuit</string>
    <string name="truth_table">Truth Table</string>
    <string name="truth_table_explanation">A combinational circuits\'s operation is fully described by a truth table that lists all combinations of input values and the output value(s) produced by each one.</string>
    <string name="logic_operations_title">Logic Operations</string>
    <string name="done">Done</string>
    <string name="logic_operations_explanation1">Operations performed on the binary variables few called Logic Operations.</string>
    <string name="logic_operations_explanation2">Just three BASIC logic operations/functions, AND, OR and NOT, can be used to build any combinational digital logic circuit.</string>
    <string name="logic_operations_NOT_explanation">This operation is represented by an over bar (-) or a prime (\').\nIt produces the opposite value: \n- If X is 0 then X\' is 1.\n- If X is 1 then X\' is 0.\nAlso called complement or inversion operation</string>
    <string name="logic_operations_AND_explanation">- The AND operation is represented by a dot (.).e.g. F = X.Y\n- Usually the doe is omitted: F = XY\n- The operation results is if ALL the variables are 1, then the result is 1. Otherwise, the result is 0.\n</string>
    <string name="logic_operations_OR_explanation">- The OR operation is represented by a plus sign (+). e.g., F = X + Y\n- The operatioin result is if ANY of the variables is 1, then the result is 1. Otherwise the result is 0.</string>
    <string name="nand">NAND</string>
    <string name="logic_operations_NAND_explanation">- The small circle at the output is called an inversion bubble and is used to denote \"inverting\" behavior on logic symbols.\n-A NAND gate (short for NOT-AND) is the same as AND followed by NOT.\n -The truth table for NAND is the opposite of AND.</string>
    <string name="nor">NOR</string>
    <string name="logic_operations_NOR_explanation">-A NOR gate (NOT-OR) is the same as OR followed by NOT.\n -The OR and NOT symbols are merged to get NOR\n -The truth table for NOR is the opposite of OR.\n-When any input contains 1, output becomes 0.</string>
    <string name="xor">XOR</string>
    <string name="logic_operations_XOR_explanation">- The XOR is called the exclusive OR because it is similar to the OR gate, but it only outputs an HIGH if there is exclusively one input that is high. \n- It is great for projects in which the activation requires input alternation.\n- It will output a high signal if an odd number of the inputs are high.\n</string>
    <string name="xnor">XNOR</string>
    <string name="logic_operations_XNOR_explanation">- The XNOR expands to eXclusive-Not-OR.\n -This gate is referred to as the \"equivalence\" gate because its outputs HIGH only if both inputs are the same (either both high or both low), and outputs LOW when the inputs are different(one high and one low).</string>
    <string name="summary">Summary\n</string>
    <string name="boolean_function">Boolean Function</string>
    <string name="kmap">K MAP</string>

</resources>