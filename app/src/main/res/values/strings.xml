<resources>
    <string name="app_name">LogiCApp</string>
    <string name="logikit">LogiKit</string>
    <string name="crashcourse">Crash Course</string>
    <string name="challenges">Challenges</string>
    <string name="welcome_to_logicapp">Welcome to LogiCApp</string>
    <string name="course_material">COURSE MATERIAL TO BE ADDED SOON</string>
    <string name="and">AND</string>
    <string name="not">NOT</string>
    <string name="or">OR</string>
    <string name="challenge_intro">Ready to squeeze some brain juice!!!</string>
    <string name="manualIntro">Instructions on how to use the LogiKit</string>
    <string name="intro">Introduction</string>
    <string name="logic_signals">A logic value, 0 or 1, is often called a binary digit, or a bit. If an application requires more than two discrete values, more bits may be used, with a set o n bits representing 2 to the power of n  different values</string>
    <string name="previous_page">Prev</string>
    <string name="next_page">Next</string>
    <string name="combinational_circuit">Combinational Circuit</string>
    <string name="combination_circuit_explanation">A logic circuit whose outputs depend only on its current inputs is called a combinational circuit</string>
    <string name="truth_table">Truth Table</string>
    <string name="truth_table_explanation">A combinational circuits\'s operation is fully described by a truth table that lists all combinations of input values and the output value(s) produced by each one.</string>
    <string name="logic_operations_title">Logic Operations</string>
    <string name="done">Done</string>
    <string name="logic_operations_explanation1">Operations performed on the binary variables few called Logic Operations.</string>
    <string name="logic_operations_explanation2">Just three BASIC logic operations/functions, AND, OR and NOT, can be used to build any combinational digital logic circuit.</string>
</resources>